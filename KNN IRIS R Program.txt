KNN with Iris Dataset

Aim: 
To predict the type of Iris flowers – sentosa, virginica and versicolor on the dataset using Knearest neighbourhood algorithm.

Procedure:
Step 1: Load the Iris dataset into R using the following command.
data(“iris”)

Step 2: To see the data use the following command
head(iris)

Sepal.Length Sepal.Width Petal.Length Petal.Width Species

1 5.1 3.5 1.4 0.2 setosa
2 4.9 3.0 1.4 0.2 setosa
3 4.7 3.2 1.3 0.2 setosa
4 4.6 3.1 1.5 0.2 setosa
5 5.0 3.6 1.4 0.2 setosa
6 5.4 3.9 1.7 0.4 setosa

Step 3: Sampling the Iris Data.

ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))

In the above command we are using the sample function to sample in a random manner. We will sample with replacement: we choose from a vector of 2 elements and assign either 1 or 2 to the 150rows of the Iris data set. The assignment of the elements is subject to probability weights of 0.67 and 0.33.

101 elements out of 150 will be assigned as 1. [101/150 = 0.67]
49 elements out of 150 will be assigned as 2. [49/150 = 0.33]

Step 4: Creating the Train and Test Datasets

iris_train <- iris[ind==1, 1:4]

In the above command we are creating the train dataset for elements that are equal to 1.
1:4 means we are taking the rows 1,2,3 and 4 which are Sepal.Length, Sepal.Width, Petal.Length,Petal.Width respectively.

iris_test <- iris[ind==2, 1:4]

In the above command we are creating the test dataset for elements that are equal to 2.
1:4 means we are taking the rows 1,2,3 and 4 which are Sepal.Length, Sepal.Width, Petal.Length,Petal.Width respectively.

iris_train_labels <- iris[ind==1, 5]

In the above command we are creating train labels (sentosa, virginica and versicolor) for elements that are equal to 1 [ind==1,5]. 5 represents the 5th column in the dataset.

iris_test_labels <- iris[ind==2, 5]

In the above command we are creating test labels (sentosa, virginica and versicolor) for elements that are equal to 1 [ind==1,5]. 5 represents the 5th column in the dataset.

Step 5: Creating the KNN model

library(class)

iris_test_pred<-knn(train=iris_train, test=iris_test, cl=iris_train_labels, k=3)

We store into iris_pred the knn() function that takes as arguments the training set, the test set, the train labels and the amount of neighbours we want to find with this algorithm – k=3.

Step 6: Evaluation of the Model using a Contingency Table or Cross Table

library(gmodels)

CrossTable(x=iris_test_labels, y=iris_test_pred, prop.chisq = FALSE)

Note that the last argument prop.chisq indicates whether or not the chi-square contribution of each cell is included. The chi-square statistic is the sum of the contributions from each of the individual

cells and is used to decide whether the difference between the observed and the expected values is significant.